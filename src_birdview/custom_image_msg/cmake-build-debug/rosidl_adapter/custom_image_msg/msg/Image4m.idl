// generated from rosidl_adapter/resource/msg.idl.em
// with input from custom_image_msg/msg/Image4m.msg
// generated code does not contain a copyright notice

#include "custom_image_msg/msg/Header.idl"
#include "custom_image_msg/msg/String.idl"

module custom_image_msg {
  module msg {
    typedef uint8 uint8__4000000[4000000];
    module Image4m_Constants {
      const uint32 DATA_MAX_SIZE = 4000000;
    };
    @verbatim (language="comment", text=
      "This message contains an uncompressed image" "\n"
      "(0, 0) is at top-left corner of image")
    struct Image4m {
      @verbatim (language="comment", text=
        "Header timestamp should be acquisition time of image" "\n"
        "Header frame_id should be optical frame of camera" "\n"
        "origin of frame should be optical center of cameara" "\n"
        "+x should point to the right in the image" "\n"
        "+y should point down in the image" "\n"
        "+z should point into to plane of the image" "\n"
        "If the frame_id here and the frame_id of the CameraInfo" "\n"
        "message associated with the image conflict" "\n"
        "the behavior is undefined")
      custom_image_msg::msg::Header header;

      @verbatim (language="comment", text=
        "image height, that is, number of rows")
      uint32 height;

      @verbatim (language="comment", text=
        "image width, that is, number of columns")
      uint32 width;

      @verbatim (language="comment", text=
        "The legal values for encoding are in file src/image_encodings.cpp" "\n"
        "If you want to standardize a new char[256] format, join" "\n"
        "ros-users@lists.ros.org and send an email proposing a new encoding." "\n"
        "Encoding of pixels -- channel meaning, ordering, size" "\n"
        "taken from the list of char[256]s in include/sensor_msgs/image_encodings.hpp")
      custom_image_msg::msg::String encoding;

      @verbatim (language="comment", text=
        "is this data bigendian?")
      uint8 is_bigendian;

      @verbatim (language="comment", text=
        "Full row length in bytes")
      uint32 step;

      @verbatim (language="comment", text=
        "actual matrix data, size is (step * rows)")
      uint8__4000000 data;
    };
  };
};
